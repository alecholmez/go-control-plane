// Code generated by create_version. DO NOT EDIT.
// Copyright 2020 Envoyproxy Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package cache

import (
	"sync/atomic"
	"time"

	"github.com/envoyproxy/go-control-plane/pkg/cache/types"
)

// CreateDeltaWatch returns a watch for a delta xDS request.
func (cache *snapshotCache) CreateDeltaWatch(request *DeltaRequest, versionMap map[string]string) (chan DeltaResponse, func()) {
	nodeID := cache.hash.ID(request.Node)
	t := request.GetTypeUrl()

	cache.mu.Lock()
	defer cache.mu.Unlock()

	info, ok := cache.status[nodeID]
	if !ok {
		info = newStatusInfo(request.Node)
		cache.status[nodeID] = info
	}

	// update last watch request times
	info.mu.Lock()
	info.lastDeltaWatchRequestTime = time.Now()
	info.mu.Unlock()

	value := make(chan DeltaResponse, 1)

	// find the current cache snapshot for the provided node
	snapshot, exists := cache.snapshots[nodeID]
	snapshotVersion := snapshot.GetVersion(t)

	// if there is no change in resource version from the previous snapshot then we should create a new watch accordingly
	// if all requested versions are up-to-date or missing a response, leave an open watch
	if !exists || !cache.respondDelta(request, value, versionMap, snapshot.GetResources(t)) {
		watchID := cache.nextDeltaWatchID()
		if cache.log != nil {
			cache.log.Infof("open delta watch ID:%d for %s Resources:%v from nodeID: %q, system version %q", watchID,
				t, versionMap, nodeID, snapshotVersion)
		}

		info.mu.Lock()
		info.deltaWatches[watchID] = DeltaResponseWatch{Request: request, Response: value, VersionMap: versionMap}
		info.mu.Unlock()

		return value, cache.cancelDeltaWatch(nodeID, watchID)
	}

	return value, nil
}

func (cache *snapshotCache) nextDeltaWatchID() int64 {
	return atomic.AddInt64(&cache.deltaWatchCount, 1)
}

// cancellation function for cleaning stale watches
func (cache *snapshotCache) cancelDeltaWatch(nodeID string, watchID int64) func() {
	return func() {
		// uses the cache mutex
		cache.mu.Lock()
		defer cache.mu.Unlock()
		if info, ok := cache.status[nodeID]; ok {
			info.mu.Lock()
			delete(info.deltaWatches, watchID)
			info.mu.Unlock()
		}
	}
}

func (cache *snapshotCache) respondDelta(request *DeltaRequest, value chan DeltaResponse, versionMap map[string]string, resources map[string]types.Resource) bool {
	if cache.log != nil {
		cache.log.Debugf("node: %s sending delta response %s with resource versions: %v",
			request.GetNode().GetId(), request.TypeUrl, versionMap)
	}

	resp, err := createDeltaResponse(request, versionMap, resources)
	if err != nil {
		if cache.log != nil {
			cache.log.Errorf("Error creating delta response: %v", err)
		}
		return false
	}
	if len(resp.Resources) > 0 || len(resp.RemovedResources) > 0 {
		value <- resp
		return true
	}
	return false
}

func createDeltaResponse(request *DeltaRequest, versionMap map[string]string, resources map[string]types.Resource) (*RawDeltaResponse, error) {
	newVersionMap := make(map[string]string)
	filtered := make([]types.Resource, 0)
	toRemove := make([]string, 0)
	if len(versionMap) == 0 {
		for resourceName, resource := range resources {
			var err error
			newVersionMap[resourceName], err = HashResource(resource)
			if err != nil {
				return nil, err
			}
			filtered = append(filtered, resource)
		}
	} else {
		// Reply only with the requested resources. Envoy may ask each resource
		// individually in a separate stream. It is ok to reply with the same version
		// on separate streams since requests do not share their response versions.
		for resourceName, oldVersion := range versionMap {
			if r, ok := resources[resourceName]; ok {
				newVersion, err := HashResource(r)
				if err != nil {
					return nil, err
				}
				if oldVersion != newVersion {
					filtered = append(filtered, r)
				}
			} else {
				toRemove = append(toRemove, resourceName)
			}
		}
	}

	// send through our version map
	return &RawDeltaResponse{
		DeltaRequest:     request,
		Resources:        filtered,
		RemovedResources: toRemove,
		VersionMap:       newVersionMap,
	}, nil
}
